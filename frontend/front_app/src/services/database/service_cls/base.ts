import PouchDB from 'pouchdb'
import PouchDBFind from 'pouchdb-find'
import PouchDBAuthentication from 'pouchdb-authentication'

export const initPouchDB = () => {
    PouchDB.plugin(PouchDBFind)
    PouchDB.plugin(PouchDBAuthentication)
}

export class BaseDatabaseService {
    /** –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î */

    protected db: PouchDB.Database

    constructor(key: string) {
        this.db = new PouchDB(key)
    }

    async getByIdOrNull<T extends object>(id: string): Promise<T | null> {
        /**
         * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç –≤ –ë–î
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ catch status != 404
         * */

        return this.db.get(id).then((doc) => {
            return doc as T
        }).catch((error) => {
            if (error.status === 404) return null
            throw error
        })
    }

    async _createDocument<D extends object>(data: D) {
        /** –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î */

        return this.db.post(data)
    }

    async _createAuditDocument<D extends object>(data: D) {
        /** –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î —Å –¥–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */

        return this._createDocument({
            ...data,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        })
    }

    async _find<T extends object>(...args: Parameters<PouchDB.Database['find']>): Promise<PouchDB.Core.ExistingDocument<T>[]> {
        /**
         * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–ª–∏–±–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
         * */

        return this.db.find(...args).then((res) => {
            if (res.warning) console.warn('üîç PouchDB find warning:', res.warning)
            return res.docs as PouchDB.Core.ExistingDocument<T>[]
        })
    }

    async _findOneOrNull<T extends object>(...args: Parameters<PouchDB.Database['find']>) {
        /**
         * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
         * */

        return this._find<T>(...args).then((res) => {
            return res[0] || null
        })
    }

    async removeDocumentById(id: string) {
        /**
         * –£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ë–î –ø–æ id
         * */

        return this.db.get(id).then(doc => {
            return this.db.remove(doc)
        }).catch(err => {
            console.error(`Error removing document with id "${id}":`, err)
        })
    }

    async _removeDocumentsByFind(...args: Parameters<PouchDB.Database['find']>): Promise<void> {
        /**
         * –£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ë–î –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞
         * */

        return this._find(...args).then(async docs => {
            if (!docs.length) return
            await this.db.bulkDocs(docs.map(doc => ({ _id: doc._id, _rev: doc._rev, _deleted: true })))
        }).catch(err => {
            console.error(`Error removing documents by find:`, err)
        })
    }
}

export class BaseTypeDatabaseService<T extends string> extends BaseDatabaseService {
    /** –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î —Å —Ç–∏–ø–æ–≤—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ */

    constructor(key: string) {
        super(key)
        this.db.createIndex({
            index: {
                fields: ['type']
            }
        })
    }

    async _createTypeDocument<D extends object>(type: T, data: D) {
        /** –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î */

        return this._createDocument({
            type,
            ...data,
        })
    }

    async _createAuditTypeDocument<D extends object>(type: T, data: D) {
        /** –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î —Å –¥–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */

        return this._createAuditDocument({ type, ...data })
    }

    async _updateTypeDocument<D extends object>(exDoc: PouchDB.Core.ExistingDocument<D>, type: T, data: D) {
        /** –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î */

        return this.db.put<D>({
            _id: exDoc._id,
            _rev: exDoc._rev,
            type: type,
            ...data, // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        })
    }

    async _createOrUpdateTypeDocument<D extends object>(
        exDoc: PouchDB.Core.ExistingDocument<D> | undefined | null, type: T, data: D
    ) {
        /** –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î */

        if (exDoc) return this._updateTypeDocument(exDoc, type, data)
        return this._createTypeDocument(type, data)
    }

    async _findByType<T extends object>(type: string): Promise<PouchDB.Core.ExistingDocument<T>[]> {
        /**
         * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É
         * */

        return this._find<T>({ selector: { type } })
    }
}
